name: Pre Release

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      actions: write

    strategy:
      matrix:
        python_version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python_version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch
        hatch env create

    - name: Lint and typecheck
      run: |
        hatch run lint-check

    - name: Test
      run: |
        hatch run test

  release:
    runs-on: ubuntu-latest
    environment: release
    needs: test
    permissions:
        contents: write
        id-token: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install hatch

#    - name: Extract version from __init__.py
#      id: extract_version
#      shell: bash
#      run: |
#        VERSION=$(python -c "exec(open('imxIcons/__init__.py').read()); print(__version__)")
#        echo "version=$VERSION" >> $GITHUB_ENV
#
#    - name: Get latest tag from git
#      id: get_latest_tag
#      run: |
#        LATEST_TAG=$(git describe --tags --abbrev=0)
#        echo "latest_tag=$LATEST_TAG" >> $GITHUB_ENV
#
#    - name: Compare versions
#      id: compare_versions
#      run: |
#        VERSION_COMPARISON=$(python -c "import pkg_resources; current_version = '${{ env.version }}'; latest_version = '${{ env.latest_tag }}'; print(pkg_resources.parse_version(current_version) > pkg_resources.parse_version(latest_version))")
#        echo "version_comparison=$VERSION_COMPARISON" >> $GITHUB_ENV

    - name: Conditional release creation
      if: env.version_comparison == 'True'
      run: |
        echo "Creating new release since version is higher than the latest tag."

        # Build the package
        hatch build

        # Create draft release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          name: ðŸš€ Version ${{ env.version }}
          tag: v${{ env.version }}
          generateReleaseNotes: true
          artifacts: |
            dist/*.whl
            dist/*.tar.gz
            source-code.zip
          token: ${{ secrets.GITHUB_TOKEN }}

    - name: Skip release if version is not higher
      if: env.version_comparison == 'False'
      run: |
        echo "No new release created, version is not higher than the latest tag."
